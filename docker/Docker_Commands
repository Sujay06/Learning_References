DOCKER INSTALLATION(UBUNTU)::
-----------------------------
sudo apt-get remove docker docker-engine docker.io containerd runc
sudo apt-get update -y
sudo apt-get install -y apt-transport-https     ca-certificates     curl     gnupg-agent     software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo apt-key fingerprint 0EBFCD88
sudo add-apt-repository    "deb [arch=amd64] https://download.docker.com/linux/ubuntu    $(lsb_release -cs)    stable"
sudo apt-get update -y
sudo apt-get install -y docker-ce docker-ce-cli containerd.io

----------------------------------------------------------------------------------------------------------------------
DOCKER COMMANDS::
-----------------
>sudo passwd root	#To set the Ubuntu Password(Enter and Re-Enter your passwords here-)
>su root		#To login as root user

>sudo docker info			#Provides all info regarding most of the docker components 
>sudo docker login
>sudo docker logout
>docker -v				To check the version of running docker engine.
>systemctl restart docker		#To restart the  docker-host
>sudo docker stop --help
>sudo docker exec --help

> df -h 				#To list the disk utilization of the host machine(this is only for linux OS)
>docker system df			#To list the disk utilization by the docker-host(i.e contaniers, images,cache,volumes)
>docker system df -v			#To list the disk usage by individual docker items like contaniers, images,cache,volumes.

>sudo docker pull <image-name>
>sudo docker push <image-name>

>sudo docker ps 
>sudo docker ps -a
>sudo docker images
>sudo docker history <image-name>	#To list all the layers present in the Dockerfile used for creation of this image.
	Eg: sudo docker history ubuntu (Lists all the layers in the Dockerfile of Ubuntu image)
		(PS: To reduce the number os layers and save disl-space in an image use "&&" between recurring commands.)
>sudo docker tag <image-id> <tagname:version>
	Eg:sudo docker tag <image-id> <test:v1.0>

>sudo docker inspect <image> | grep Metadata		#grep is a linux tool to filter
>sudo docker inspect <image>				#To list all the details of the image; 
>sudo docker inspect <image> --format='{{.parameter}}'	# " --format='{{.parameter}}' " is a filtering option provided by docker-host
	Eg: sudo docker inspect nginx --format='{{.Metadata}}'
	   (OR) sudo docker inspect nginx -f='{{.Metadata}}'
>sudo docker inspect <image> --format='{{json.parameter}}'	#when the parameter has the parent-shild relationship and you need to list it.
	Eg:sudo docker inspect ubuntu -f='{{json .Config}}'	#outputs all the Config parameters.
	   sudo docker inspect ubuntu -f='{{.ContainerConfig.Hostname}}'	#Outputs only Hostname

>sudo docker run --help			#To list all the options available for docker run(--help works with all docker commands!!)
>sudo docker run --help | grep rm 	#To view what are the options available for run adn shortlist it to rm 
>sudo docker run -it -d <image>
>sudo docker run -it -d -p 4000:80 <image>			#To map to a specific port
>sudo docker run -it -d --name=<conatiner-name> <image>		#To give a specific name to a container at runtime.
>sudo docker run -it -d <image> sleep 50			#To run the container for 50secs and then exits the container.
>sudo docker run -it -d <image> -arg1 -arg2 -arg3		#To pass the required args to be run at the runtime of the container.
>sudo docker run -it -d <image> ping -c10 google.com		#To run a container which pings google.com 10times and then exits automatically.
>sudo docker run -dt --rm <image> ping -c10 google.com		#To run a container which pings google.com 10 times and exits automatically and then is removed permanently from the docker-host(Best practise to free up disk-space from unwanted containers)

>sudo docker run -dt --name test1 nginx		#Port of the container is open, but it is not mapped to any port of the docker host
>sudo docker run -dt --name test2 -p 8000:80 nginx	#Port 80 of the contianer is mapped to post 8000 of the docker host
>sudo docker run -dt --name test3 -P nginx	#Port 80 of the container is mapped to a random open port of the docker host

>sudo docker build -t <reponame>/<tagname> .
>sudo docker rmi -f <image-ID> <image-ID>.....
>sudo docker rm -f  <container-iD> <container-id>.....
>sudo docker kill <container-ID>
>sudo docker stop <container-ID>
>sudo docker start <container-ID>
>sudo docker inspect <container-ID>				#To view all the date for a container

>sudo docker exec -it <conatiner-ID> bash			#To enter into the container.
	Nginx using exec(Working with Docker EXEC command):
	---------------------------------------------------
	(The command started with docker-exec runs only when container's primary process is running)
		>sudo docker run -d --name=test_nginx nginx
		>sudo docker exec -it test_nginx bash
		>/etc/init.d/nginx status		#To check the status of nginx service.
		>apt-get update 
		>apt-get install net-tools		#To install net-tools
		>netstat -ntlp				#To list all the active connections to the container.
		>which netstat 				#To determine where the netstat file is located(displays /bin/netstat)
		>exit(to exit the container)
		>sudo docker exec -it test_nginx netstat -ntlp		#To show that exec commands work without being logically logged in to the conatiner(This can work only when the prosess is running with PID=1).

>sudo docker commit <Container-ID> <new-image-name>		#To make changes inside the container and save it. This creates a new docker image from which new container can be started. The newly started contanier reflects all the changes made.
>sudo docker commit --change='CMD ["ping"]' <container-id>	#To modify CMD from sh to ping at runtime.This creates a new docker image from which new container can be started. The newly started contanier reflects all the changes made.
		(COMMIT allows user to change CMD,WORKDIR,ENV,LABEL,ENTRYPOINT,EXPOSE,ONBUILD,USER,VOLUME,WORKDIR parameters of the container. PS: new images are created at every commit, which increases disk-space)

>sudo docker search <image>	#To search for all the images listed in docker hub with the specified name
	Eg: sudo docker search nginx
>sudo docker search --limit int <image>	#Apply an integer limit to filter the seach results
	Eg: sudo docker search --limit 5 nginx	(Displays the top 5 nginx images based on STARS)
>sudo docker search --filter "is-official=true" <Image>	#To filter based on the parameter passed
	Eg:sudo dokcer search --filter "is-official=true" nginx	(Displays ony official nginx image)

---------------------------------------------------------------------------------------------------------------------------------------------
DOCKER-PRUNE::	(PRUNE to clean up disk space)
--------------
Image Prune::
-------------
>sudo docker image prune				#To remove any dangling image. A dangling image is one that is not tagged and is not referenced by any container.
>sudo docker image prune -a				#To remove all images which are not used by existing containers, use the -a flag.
>sudo docker image prune --filter "until=24h"		#To remove all the dangling images stopped for more than 24hrs.

Container Prune::
-----------------
>sudo docker container prune				#To stop all the stopped containers.
>sudo docker container prune -a
>sudo docker container prune --filter "until=24h"	#To remove all the stopped containers for more than 24hrs.

Volume Prune::
--------------
>sudo docker volume prune				#To remove docker volume.
>sudo docker volume prune --filter "label!=keep"	#To remove volumes which are not labelled with the keep label

Network Prune::
---------------
>sudo docker network prune				#To clean things like iptables rules, bridge network devices, and route table entries.
>sudo docker network prune --filter "until=24h"		#To remove networks older than 24 hours.

System Prune(Prune everything)::
--------------------------------
(The docker system prune command is a shortcut that prunes images, containers, and networks, but does not prune volumes(it shoud be explicitly mentioned))
>sudo docker system prune				#To prune everything except docker volumes.
>sudo docker system prune --volumes			#To prune everything including docker volumes.

TO MODIFY AN IMAGE TO A SINGLE LAYER::
--------------------------------------
(Example here from nginx image)
>sudo docker pull nginx
>sudo docker run -dt --name mynginx nginx
>sudo docker export mynginx > mynginx.tar	#To compress the image into a .tar file
>cat myngin.tar |sudo docker import - mynignx_latest	#To de-compress the image into a single layered image
>sudo docker history mynginx_latest	#To view the single layer image structure.

--------------------------------------------------------------------------------------------------------------------------------------------
DOCKER DinD ::
-----------------
>sudo docker run -it -d docker:dind				  	#Pulls and runs docker-dind image from docker-hub.
>sudo docker -v /var/run/docker.sock:/var/run/docker.sock docker  	#To run DinD in docker; and map the daemons of the host and container docker files.
>sudo docker exec -it <container-id> /bin/bash

---------------------------------------------------------------------------------------------------------------------------------------------
DOCKER-VOLUMES::
----------------
>sudo docker volume create test_vol		#To create a new volume called "test_vol"
>sudo docker volume ls				#To list volumes
>sudo docker volume inspect test_vol		#To render attributes of a volume
>sudo docker volume rm test_vol			#To remove a volume
>sudo docker volume prune <test_vol>		#To remove one or more unused docker volumes

TO MOUNT A VOLUME IN DOCKER ::
------------------------------
>sudo docker create test_vol
>sudo docker run -it -d --mount source=<volume-name>,target=<target-file-path> <image-name>
Eg: sudo docker run -it -d --mount source= test_vol, target=/var/www/html apache2

-------------------------------------------------------------------------------------------------------------------------
DOCKER-COMMAND-PIPING::
-----------------------
>sudo docker container stop $(sudo docker container ls -a -q)		#To stop multiple containers all at once
>sudo docker container start $(sudo docker container ls -a -q)		#To start multiple containers all at once
>sudo docker rmi -f $(sudo docker images -a -q)				#To remove all images at once
>sudo docker rm -f $(sudo docker ps -a -q)				#To remove all dead containers at once

>sudo usermod -aG docker $USER						#To change user permissions and run commands without "SUDO"
--------------------------------------------------------------------------------------------------------------------------
DOCKER REGISTRY:
----------------
(Registry is a centralised storage area for all your Docker images, similar to GitHub)

Different types of registries available::
-----------------------------------------
1.Docker Registry	#Open source registry
2.Docker Trusted Registry	#For Enterprise Docker Editions
3.Private Repository(AWS ECR)
4.Docker Hub

TO PUSH AN IMAGE INTO THE DOCKER-REGISTRY::
-------------------------------------------
(Example here from ubuntu image)
>sudo docker pull registry	#pull registry image from DockerHub
>sudo docker run -dt --name registry --restart always -p 5000:5000 registry:2	#Always map to 5000 of the container and give restart always flag.

>sudo docker pull ubuntu	#pull an image from DockerHub
>sudo docker tag ubuntu localhost:5000/myubuntu	#To tag ubuntu to myubuntu(Give any preferred name)
>sudo docker push localhost:5000/myubuntu	#pushes to registry container

>sudo docker pull localhost:5000/myubuntu	#To pull the custom ubuntu image for use(Pulls from the registry container and not DockerHib)

TO PUSH AN IMAGE TO DOCKER-HUB::
--------------------------------
(Example here from ubuntu)
>sudo docker pull ubuntu
>sudo docker tag ubuntu DockerHub-ID/repo-name
	Eg: sudo docker tag ubuntu sujaykm/myubuntu
>sudo docker push DockerHub-ID/repo-name
	Eg:sudo docker push sujaykm/myubuntu

-------------------------------------------------------------------------------------------------------------------------------------------
BusyBox Commands:
-----------------
(Run a busybox image and exec into the container(use sh at the end instead of bash))
>dd if=/dev/zero of=bigfile.txt bs=1M count=500		#To create a single txt file called bigfile.txt of sixe 500Mb inside busybox container
>du -sh bigfile.txt	#To list the size of the file caled bigfile.txt

-----------------------------------------------------------------------------------------------------------------------------------------------

